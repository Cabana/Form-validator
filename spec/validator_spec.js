// Generated by CoffeeScript 1.6.2
(function() {
  describe('Validator', function() {
    return describe('#validateInput', function() {
      beforeEach(function() {
        return this.validator = new FormValidator;
      });
      describe('format validation', function() {
        describe('email', function() {
          it('returns true if the input contains a valid email', function() {
            var node;

            node = sandbox('<input data-validation="format:[email]" value="david.pdrsn@gmail.com" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          return it('returns false if the input contains an invalid email', function() {
            var node;

            node = sandbox('<input data-validation="format:[email]" value="invalid email" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
        return describe('telephone', function() {
          it('returns true if the input contains a valid telephone number', function() {
            var node;

            node = sandbox('<input data-validation="format:[tel]" value="12345678" type="tel">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          return it('returns false if the input contains an invalid telephone number', function() {
            var node;

            node = sandbox('<input data-validation="format:[tel]" value="123" type="tel">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
      });
      describe('required validation', function() {
        it('returns true if the input has a value', function() {
          var node;

          node = sandbox('<input data-validation="format:[required]" value="some value" type="email">');
          return expect(this.validator.validateInput(node)).toBe(true);
        });
        return it('returns false if the input does not have a value', function() {
          var node;

          node = sandbox('<input data-validation="format:[required]" value="" type="email">');
          return expect(this.validator.validateInput(node)).toBe(false);
        });
      });
      describe('length validation', function() {
        describe('with only a min attribute', function() {
          it('returns true if the input value is within range', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:3]" value="fkasdjfasjfkg" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          it('returns false if the input value is out of range', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:3]" value="f" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
          return it('returns true if the input value is exactly the min length', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:3]" value="fff" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
        });
        describe('with only a max attribute', function() {
          it('returns true if the input value is within range', function() {
            var node;

            node = sandbox('<input data-validation="length:[max:3]" value="f" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          it('returns false if the input value is out of range', function() {
            var node;

            node = sandbox('<input data-validation="length:[max:3]" value="aiudshfiuahsdlifuah" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
          return it('returns false if the input is exactly the max length', function() {
            var node;

            node = sandbox('<input data-validation="length:[max:3]" value="fff" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
        describe('with both a min and max range', function() {
          it('returns true if the input value is within range', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:1, max:10]" value="foo" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          return it('returns false if the input value is out of range', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:1, max:10]" value="ahdsfoiuagosyudgfoausyhdf" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
        return describe('with an exact length', function() {
          it('returns true if the input value is exactly the specified length', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:3, max:3]" value="fff" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          return it('returns false if the input value is out of the range', function() {
            var node;

            node = sandbox('<input data-validation="length:[min:3, max:3]" value="f" type="email">');
            expect(this.validator.validateInput(node)).toBe(false);
            node = sandbox('<input data-validation="length:[min:3, max:3]" value="fffffff" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
      });
      describe('allow empty', function() {
        it('returns true if the input is empty even though it has a format validation', function() {
          var node;

          node = sandbox('<input data-validation="format:[email], allowEmpty:true" value="" type="email">');
          return expect(this.validator.validateInput(node)).toBe(true);
        });
        return it('returns false if the input contains an invalid value', function() {
          var node;

          node = sandbox('<input data-validation="format:[email], allowEmpty:true" value="invalid emai" type="email">');
          return expect(this.validator.validateInput(node)).toBe(false);
        });
      });
      return describe('word count', function() {
        return describe('with only a min attribute', function() {
          it('returns true if the word count is within range', function() {
            var node;

            node = sandbox('<input data-validation="wordCount:[min:2]" value="foo bar baz" type="email">');
            expect(this.validator.validateInput(node)).toBe(true);
            node = sandbox('<input data-validation="wordCount:[min:2]" value="foo bar" type="email">');
            return expect(this.validator.validateInput(node)).toBe(true);
          });
          return it('returns false if the word count is out of range', function() {
            var node;

            node = sandbox('<input data-validation="wordCount:[min:2]" value="foo" type="email">');
            return expect(this.validator.validateInput(node)).toBe(false);
          });
        });
      });
    });
  });

}).call(this);
