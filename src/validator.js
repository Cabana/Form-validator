// Generated by CoffeeScript 1.6.2
(function() {
  var __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  this.FormValidator = (function() {
    function FormValidator() {
      this.parser = new Parser(this.validations);
    }

    FormValidator.prototype.validations = {
      email: '.+@.+\\..+',
      tel: '\\d{8}',
      required: '.+'
    };

    FormValidator.prototype.validateInput = function(input) {
      var format, isValid, length, validationObject, value, wordCount;

      value = input.value;
      validationObject = this._generateValidationObject(input.dataset.validation);
      format = validationObject.format || {};
      length = validationObject.length || {};
      wordCount = validationObject.wordCount || {};
      isValid = [];
      Object.keys(format).forEach(function(key) {
        var regex;

        regex = new RegExp(format[key]);
        return isValid.push(regex.test(value));
      });
      Object.keys(length).forEach(function(key) {
        var max, min, _i, _ref, _results;

        min = length.min;
        max = length.max;
        if (min && max) {
          return isValid.push((_ref = value.length, __indexOf.call((function() {
            _results = [];
            for (var _i = min; min <= max ? _i <= max : _i >= max; min <= max ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this), _ref) >= 0));
        } else if (min) {
          return isValid.push(value.length >= min);
        } else if (max) {
          return isValid.push(value.length <= max);
        }
      });
      Object.keys(wordCount).forEach(function(key) {
        var max, min, regex, _i, _ref, _results;

        min = wordCount.min;
        max = wordCount.max;
        regex = /[ ]+/;
        if (min && max) {
          return isValid.push((_ref = value.split(regex).length, __indexOf.call((function() {
            _results = [];
            for (var _i = min; min <= max ? _i <= max : _i >= max; min <= max ? _i++ : _i--){ _results.push(_i); }
            return _results;
          }).apply(this), _ref) >= 0));
        } else if (min) {
          return isValid.push(value.split(regex).length >= min);
        } else if (max) {
          return isValid.push(value.split(regex).length <= max);
        }
      });
      if (value === '' && validationObject.allowEmpty) {
        isValid = [true];
      }
      if (__indexOf.call(isValid, false) >= 0) {
        return false;
      } else {
        return true;
      }
    };

    FormValidator.prototype.defineCustomValidation = function(name, regex) {
      return this.parser.addDefaultValue(name, regex);
    };

    FormValidator.prototype.validateForm = function(form) {
      var input, validationResults, _i, _len, _ref;

      validationResults = [];
      _ref = form.querySelectorAll('input[data-validation], textarea[data-validation]');
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        input = _ref[_i];
        validationResults.push(this.validateInput(input));
      }
      if (__indexOf.call(validationResults, false) >= 0) {
        return false;
      } else {
        return true;
      }
    };

    FormValidator.prototype._generateValidationObject = function(string) {
      return this.parser.parse(string);
    };

    return FormValidator;

  })();

}).call(this);
